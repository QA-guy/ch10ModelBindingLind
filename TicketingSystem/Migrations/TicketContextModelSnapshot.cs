// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketingSystem.Models;

namespace TicketingSystem.Migrations
{
    [DbContext(typeof(TicketContext))]
    partial class TicketContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TicketingSystem.Models.Sprint", b =>
                {
                    b.Property<string>("SprintId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SprintId");

                    b.ToTable("Sprints");

                    b.HasData(
                        new
                        {
                            SprintId = "janone",
                            Name = "JanOne"
                        },
                        new
                        {
                            SprintId = "jantwo",
                            Name = "JanTwo"
                        },
                        new
                        {
                            SprintId = "febone",
                            Name = "FebOne"
                        },
                        new
                        {
                            SprintId = "febtwo",
                            Name = "FebTwo"
                        },
                        new
                        {
                            SprintId = "marone",
                            Name = "MarOne"
                        },
                        new
                        {
                            SprintId = "martwo",
                            Name = "MarTwo"
                        },
                        new
                        {
                            SprintId = "aprone",
                            Name = "AprOne"
                        },
                        new
                        {
                            SprintId = "aprtwo",
                            Name = "AprTwo"
                        },
                        new
                        {
                            SprintId = "mayone",
                            Name = "MayOne"
                        },
                        new
                        {
                            SprintId = "maytwo",
                            Name = "MayTwo"
                        },
                        new
                        {
                            SprintId = "junone",
                            Name = "JunOne"
                        },
                        new
                        {
                            SprintId = "juntwo",
                            Name = "JunTwo"
                        },
                        new
                        {
                            SprintId = "julone",
                            Name = "JulOne"
                        },
                        new
                        {
                            SprintId = "jultwo",
                            Name = "JulTwo"
                        },
                        new
                        {
                            SprintId = "augone",
                            Name = "AugOne"
                        },
                        new
                        {
                            SprintId = "augtwo",
                            Name = "AugTwo"
                        },
                        new
                        {
                            SprintId = "sepone",
                            Name = "SepOne"
                        },
                        new
                        {
                            SprintId = "septwo",
                            Name = "SepTwo"
                        },
                        new
                        {
                            SprintId = "octone",
                            Name = "OctOne"
                        },
                        new
                        {
                            SprintId = "octtwo",
                            Name = "OctTwo"
                        },
                        new
                        {
                            SprintId = "novone",
                            Name = "NovOne"
                        },
                        new
                        {
                            SprintId = "novtwo",
                            Name = "NovTwo"
                        },
                        new
                        {
                            SprintId = "decone",
                            Name = "DecOne"
                        },
                        new
                        {
                            SprintId = "dectwo",
                            Name = "DecTwo"
                        });
                });

            modelBuilder.Entity("TicketingSystem.Models.Status", b =>
                {
                    b.Property<string>("StatusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            StatusId = "todo",
                            Name = "To Do"
                        },
                        new
                        {
                            StatusId = "inprogress",
                            Name = "In Progress"
                        },
                        new
                        {
                            StatusId = "qualityassurance",
                            Name = "Quality Assurance"
                        },
                        new
                        {
                            StatusId = "done",
                            Name = "Done"
                        });
                });

            modelBuilder.Entity("TicketingSystem.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PointValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SprintId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketId");

                    b.HasIndex("SprintId");

                    b.HasIndex("StatusId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TicketingSystem.Models.Ticket", b =>
                {
                    b.HasOne("TicketingSystem.Models.Sprint", "Sprint")
                        .WithMany()
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingSystem.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
